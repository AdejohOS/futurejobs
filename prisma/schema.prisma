// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum UserRole {
  USER
  TALENT
  RECRUITER
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role UserRole @default(USER)

  companies Company[]
  jobs Job[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Company {
  id String @id @default(cuid())
  name String
  about String?
  website String?
  address String?
  location String?
  logoUrl String

  jobs Job[]

//creator
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id String @id @default(cuid())
  title String
  description String?
  requirement String?
  salary Int?
  experienceLevel Int?
  location String?
  jobType String?
  position Int?

  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

//creator
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

 


